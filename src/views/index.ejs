<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WebChat v0.1</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;500&display=swap" rel="stylesheet">
  <!-- <link rel="stylesheet" src="index.css"> -->
  <script src="/socket.io/socket.io.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Nunito', sans-serif;
    }

    html, body {
      min-height: 100vh;
    }

    body {
      display: flex;
    }

    
    .chat {
      display: flex;
      flex-direction: column;
      margin: auto;
      width: 600px;
      border: 1px solid black;
      border-radius: 4px;
      position: relative;
    }
    
    .chat__config-form {
      padding: 6px;
      background-color: mediumslateblue;
    }

    .chat__box {
      height: 400px;
      overflow: auto;
      background-color: mintcream;
      transition: 500ms cubic-bezier(0.75,-1,0,1.75);
    }

    .chat__box.close {
      height: 0;
    }

    .chat__form {
      padding: 6px;
      display: flex;
      gap: 6px;
      background-color: mediumslateblue;
    }

    .chat__chat-input {
      flex-grow: 1;
      padding: 4px;
      border: none;
      border: 1px solid silver;
      border-radius: 2px;
      outline: none;
    }

    .chat__chat-button {
      border: 1px solid black;
      box-shadow: 0 4px 4px -2px black;
      border-radius: 2px;
      background-color: royalblue;
      padding: 0 10px;
      font-size: 1rem;
      color: white;
      transition: 100ms;
    }

    .chat__chat-button:active {
      box-shadow: none;
      transform: scale(.99);
    }

    li {
      list-style: none;
    }

    .chat__box li {
      padding: 4px;
    }

    .chat__box li:nth-child(odd) {
      background-color: #eee;
    }

    .chat__config {
      display: flex;
      flex-direction: column;
      border: 1px solid;
      position: absolute;
      padding: 10px;
      background-color: mediumslateblue;
      transform: translateX(-102%);
      height: 100%;
      border-radius: inherit;
      overflow: hidden;
    }

    .chat__nickname-input {
      flex-grow: 1;
      padding: 4px;
      border: none;
      border: 1px solid silver;
      border-radius: 2px;
      outline: none;
    }

    .chat__nickname-button {
      border: 1px solid black;
      box-shadow: 0 4px 4px -2px black;
      border-radius: 2px;
      background-color: royalblue;
      padding: 0 10px;
      font-size: 1rem;
      color: white;
      transition: 100ms;
    }

    .chat__nickname-button:active {
      box-shadow: none;
      transform: scale(.99);
    }

    .chat__online-users {
      background-color: #fff;
      border-radius: 4px;
      padding: 4px;
    }

    .chat__online-users li {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 10px;
    }

    .chat__online-users li:after {
      content: '';
      display: inline-block;
      width: 7px;
      height: 7px;
      background-color: lime;
      border-radius: 50%;
      border: 1px solid #00000075;
      box-shadow: 0 0 2px limegreen;
    }

    /* Scrollbar */
    /* width */
    ::-webkit-scrollbar {
      width: 10px;
    }

    /* Track */
    ::-webkit-scrollbar-track {
      background: #f1f1f1; 
    }
    
    /* Handle */
    ::-webkit-scrollbar-thumb {
      background: #888; 
    }

    /* Handle on hover */
    ::-webkit-scrollbar-thumb:hover {
      background: #555; 
    }
  </style>
</head>
<body>
  <div class="chat">
    <div class="chat__config">
      <h4>Online users:</h4>
      <ul class="chat__online-users"></ul>
    </div>
    <form class="chat__config-form" action="">
      <label for="nickname"><strong>Nickname:</strong></label>
      <input class="chat__nickname-input" id="nickname" type="text" data-testid="nickname-box">
      <button class="chat__nickname-button" data-testid="nickname-button">Salvar</button>
    </form>
    <ul class=chat__box></ul>
    <form class="chat__form" action="">
      <input data-testid="message-box" class="chat__chat-input" type="text">
      <button data-testid="send-button" class="chat__chat-button">Enviar</button>
    </form>
  </div>
  <script>
    const socket = io();
    // setTimeout(() => {
    //   console.log(socket.id);
    // }, 500)
    const chat = document.querySelector('.chat');
    const chatUsers = document.querySelector('.chat__online-users');
    const chatConfigForm = document.querySelector('.chat__config-form');
    const chatNicknameInput = document.querySelector('.chat__nickname-input');
    const chatNicknameButton = document.querySelector('.chat__nickname-button');
    const chatBox = document.querySelector('.chat__box');
    const chatForm = document.querySelector('.chat__form');
    const chatInput = document.querySelector('.chat__chat-input');
    const chatButton = document.querySelector('.chat__chat-button');

    const me = '32132132132';

    socket.emit('usersAlreadyConnected', { me });

    chatForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const chatMessage = chatInput.value;
      const nickname = sessionStorage.getItem('nickname');
      if (chatMessage.length) {
        socket.emit('message', { chatMessage, nickname });
        chatInput.value = '';
      }
    });

    chatConfigForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const oldNick = sessionStorage.getItem('nickname');
      const newNick = chatNicknameInput.value;
      if (!newNick.length) return;
      chatNicknameInput.value = '';
      sessionStorage.setItem('nickname', newNick);
      socket.emit('changedNickname', ({ oldNick, newNick }));
    })

    const insertMessage = (userMessage) => {
      const li = document.createElement('li');
      li.setAttribute('data-testid', 'message');
      li.innerText = userMessage;
      chatBox.appendChild(li);
    };

    const userChangedNickname = ({ oldNick, newNick }) => {
      const onlineUsers = [...document.querySelectorAll('.chat__online-users li')];
      const findUser = onlineUsers.find((user) => user.innerText === oldNick);
      findUser.innerText = newNick;
    };

    const refreshOnlineUsersList = (users) => {
      chatUsers.innerHTML = '';
      const me = sessionStorage.getItem('nickname');

      users.forEach((user) => {
        const alpha = user.slice(0, 16);
        if (alpha !== me) {
          chatUsers.innerHTML += `<li data-testid="online-user">${alpha}</li>`;
        }
      });
      
      chatUsers.innerHTML = `<li data-testid="online-user">${me}</li>` + chatUsers.innerHTML;
     };

    const renderMessages = (messages) => {
      messages.forEach(({ message, nickname, timestamp }) => {
        const li = document.createElement('li');
        li.setAttribute('data-testid', 'message');
        li.innerText = `${timestamp} - ${nickname}: ${message}`;
        chatBox.appendChild(li);
      });
    };

    const generateId = (id) => {
      sessionStorage.setItem('nickname', id.slice(0, 16));
    }

    socket.on('changedNickname', userChangedNickname);
    socket.on('messagesHistory', renderMessages);
    socket.on('message', insertMessage);
    socket.on('userConnected', generateId);
    socket.on('userJoined', refreshOnlineUsersList);
    socket.on('userLeft', refreshOnlineUsersList);
  </script>
</body>
</html>