<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>WebChat v0.1</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;500&display=swap" rel="stylesheet">
  <!-- <link rel="stylesheet" src="index.css"> -->
  <script src="/socket.io/socket.io.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Nunito', sans-serif;
    }

    html, body {
      min-height: 100vh;
    }

    body {
      display: flex;
    }

    
    .chat {
      display: flex;
      flex-direction: column;
      margin: auto;
      width: 600px;
      border: 1px solid black;
      border-radius: 4px;
      /* overflow: hidden; */
      position: relative;
    }
    
    .chat__welcome {
      padding: 6px;
      background-color: mediumslateblue;
    }

    .chat__box {
      height: 400px;
      overflow: auto;
      background-color: mintcream;
      transition: 500ms cubic-bezier(0.75,-1,0,1.75);
      perspective: 5000px;
      /* flex: 1; */
    }

    .chat__box.close {
      height: 0;
    }

    .chat__form {
      padding: 6px;
      display: flex;
      gap: 6px;
      background-color: mediumslateblue;
    }

    .chat__chat-input {
      flex-grow: 1;
      padding: 4px;
      border: none;
      border: 1px solid silver;
      border-radius: 2px;
      outline: none;
    }

    .chat__chat-button {
      border: 1px solid black;
      box-shadow: 0 4px 4px -2px black;
      border-radius: 2px;
      background-color: royalblue;
      padding: 0 10px;
      font-size: 1rem;
      color: white;
      transition: 100ms;
    }

    .chat__chat-button:active {
      box-shadow: none;
      transform: scale(.99);
    }

    li {
      list-style: none;
      padding: 8px;
    }

    li:nth-child(odd) {
      background-color: #eee;
    }

    .chat__config {
      display: flex;
      position: absolute;
      width: 300px;
      background-color: gold;
      transform: translateX(-101%);
      height: 100%;
      border-radius: inherit;
    }

    .chat__server-msg {
      background-color: lightskyblue !important;
      position: absolute;
      transform-origin: top center;
      transform: rotateX(90deg);
      width: 100%;
      transform-style: preserve-3d;
      animation: showUp 1s infinite;
    }

    @keyframes showUp {
      100% {
        transform: rotateY(0);
      }
    }

    @keyframes appear {
      to {
        opacity: 1;
      }
    }

  </style>
</head>
<body>
  <div class="chat">
    <div class="chat__config">
      <ul class="chat__online-users">
        <span>Online users:</span>
      </ul>
    </div>
    <form class="chat__config-form" action="">
      <input class="chat__nickname-input" type="text" data-testid="nickname-box">
      <button class="chat__nickname-button" data-testid="nickname-button">Salvar</button>
    </form>
    <h3 class="chat__welcome">Bem vindo!</h3>
    <ul class=chat__box></ul>
    <form class="chat__form" action="">
      <input data-testid="message-box" class="chat__chat-input" type="text">
      <button data-testid="send-button" class="chat__chat-button">Enviar</button>
    </form>
  </div>
  <script>
    const socket = io();
    const chat = document.querySelector('.chat');
    const welcome = document.querySelector('.chat__welcome');
    const chatUsers = document.querySelector('.chat__online-users');
    const chatConfigForm = document.querySelector('.chat__config-form');
    const chatNicknameInput = document.querySelector('.chat__nickname-input');
    const chatNicknameButton = document.querySelector('.chat__nickname-button');
    const chatBox = document.querySelector('.chat__box');
    const chatForm = document.querySelector('.chat__form');
    const chatInput = document.querySelector('.chat__chat-input');
    const chatButton = document.querySelector('.chat__chat-button');
    
    const randomUserName = () => {
      const upper = [...Array(26).keys()]
        .map((_, i) => String.fromCharCode(i + 65)).join('');
      const alpha = upper.concat(upper.toLowerCase(), '0123456789');
      let nickname = ''

      while (nickname.length < 16) {
        nickname += alpha[Math.floor(Math.random() * alpha.length)];
      }

      return nickname;
    };

    sessionStorage.setItem('nickname', randomUserName());

    welcome.addEventListener('click', () => chatBox.classList.toggle('close'));

    chatForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const chatMessage = chatInput.value;
      const nickname = sessionStorage.getItem('nickname');
      if (chatMessage.length) {
        socket.emit('message', { chatMessage, nickname });
        chatInput.value = '';
      }
    });

    chatConfigForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const oldNick = sessionStorage.getItem('nickname');
      const newNick = chatNicknameInput.value;
      chatNicknameInput.value = '';
      // if (oldNick !== newNick)
      sessionStorage.setItem('nickname', newNick);
      // socket.emit('changedNickname', { oldNick, newNick });
    })

    const insertMessage = (userMessage) => {
      const li = document.createElement('li');
      li.setAttribute('data-testid', 'message');
      li.innerText = userMessage;
      chatBox.appendChild(li);
    };

    const insertOnlineUser = (user) => {
      const li = document.createElement('li');
      li.setAttribute('data-testid', 'online-user');
      li.innerText = user;
      chatUsers.appendChild(li);
    }

    const serverMessage = (message) => {
      const li = document.createElement('li');
      li.className = 'chat__server-msg';
      li.innerText = message;
      chatBox.appendChild(li);
      setTimeout(() => {
        chatBox.removeChild(li);
      }, 3000)
    };

    const refreshOnlineUsersList = (users) => {
      if (!users.length) return;
      chatUsers.innerHTML = '';
      for (let user of users) {
        chatUsers.innerHTML += `<li data-testid="online-user">${sessionStorage.getItem('nickname')}</li>`
      }
    };

    socket.on('message', insertMessage);
    socket.on('userJoined', refreshOnlineUsersList);
    socket.on('userLeft', refreshOnlineUsersList);
  </script>
</body>
</html>